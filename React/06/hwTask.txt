Використання useState замість прямої зміни значення пропса в React має кілька важливих причин, пов'язаних із фундаментальними принципами бібліотеки та загальними практиками розробки веб-додатків:
1. Незмінність пропсів (Props Immutability)

У React пропси є незмінними, тобто вони не можуть бути змінені компонентом, який їх отримує. Це дизайнерське рішення дозволяє забезпечити передбачуваний потік даних у додатку та спростити відстеження змін стану. Коли вам потрібно змінити якісь дані у відповідь на дії користувача або системні події, слід використовувати стан (state) замість спроби змінити пропси.

2. Компоненти контрольовані станом (Stateful Components)

useState дозволяє створювати компоненти, які самостійно управляють своїм станом. Це не тільки сприяє інкапсуляції логіки та поведінки компоненту, але й робить компоненти більш перевикористовуваними та ізольованими, оскільки вони не залежать від зовнішніх змінних чи батьківського стану для своєї роботи.

3. Оновлення UI у відповідь на зміни стану

React оптимізований для оновлення UI у відповідь на зміни стану. Використання useState надає механізм для оголошення змінних стану в компоненті та функції для їх оновлення, що автоматично спричиняє перерендеринг компоненту. Це означає, що для відображення оновлених даних у користувацькому інтерфейсі, розробники просто змінюють стан, а React піклується про оновлення DOM.

4. Спрощення управління станом

У більших додатках з численними компонентами та складними ієрархіями, управління передачею даних через пропси може стати складним та витратним з точки зору коду. Використання локального стану з useState відповідних компонентів спрощує управління даними, оскільки стан і логіка його зміни зосереджені всередині відповідних компонентів.

Документація:
https://react.dev/reference/react/useState 

Домашня робота:
Використовуючи useState реалізуйте показ інпуту на сторінці, а також реалізуйте вивід тексту пошуку використовуючи умови перевірки тексту розглянуті на уроці.

Приклади з уроку в репозиторії
https://github.com/slastonm/deploy-react  